// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum estadoConcurso {
  inscripcion
  evaluacion
  finalizado
}

enum roles {
  jurado
  admin
}

enum PonderacionTipo {
  personalizado
  escalaUnoCinco
  Si_No
}

model usuario {
  id               String                @id @default(uuid())
  nombre           String
  usuario          String
  password         String
  createdAt DateTime @default(now())
  rol              roles
  JuradosConcursos JuradosConcursos[]
  puntajes         PuntajesConcursante[]
}

model Concurso {
  id          String         @id @default(uuid())
  nombre      String
  descripcion String
  fecha       DateTime
  estado      estadoConcurso

  createdAt  DateTime @default(now())
  id_rubrica String?

  rubrica          Rubrica?                   @relation(fields: [id_rubrica], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participantes    ParticipacionConcursante[]
  JuradosConcursos JuradosConcursos[]
}

model Rubrica {
  id          String   @id @default(uuid())
  nombre      String
  descripcion String
  createdAt   DateTime @default(now())

  concursos Concurso[]
  criterios RubricaCriterios[]
}

model RubricaCriterios {
  id          String   @id @default(uuid())
  nombre      String
  descripcion String
  createdAt   DateTime @default(now())

  id_rubrica String
  rubrica    Rubrica                @relation(fields: [id_rubrica], references: [id], onDelete: Cascade, onUpdate: Cascade)
  puntajes   CriteriosPonderacion[]
}

model CriteriosPonderacion {
  id          String   @id @default(uuid())
  nombre      String
  id_criterio String
  createdAt   DateTime @default(now())

  tipo                PonderacionTipo
  criterio            RubricaCriterios      @relation(fields: [id_criterio], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PuntajesConcursante PuntajesConcursante[]
}

model concursante {
  id          String   @id @default(uuid())
  nombre      String
  institucion String
  orden       Int?
  createdAt   DateTime @default(now())
  prueba      Boolean @default(false)

  participaciones           ParticipacionConcursante[]
  DatosGeneralesConcursante DatosGeneralesConcursante[]
}

model DatosGeneralesConcursante {
  id    String @id @default(uuid())
  campo String
  valor String
  createdAt DateTime @default(now())

  id_concursante String
  concursante    concursante @relation(fields: [id_concursante], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model JuradosConcursos {
  id          String @id @default(uuid())
  id_concurso String
  id_jurado   String

  jurado   usuario  @relation(fields: [id_jurado], references: [id], onDelete: Cascade, onUpdate: Cascade)
  concurso Concurso @relation(fields: [id_concurso], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ParticipacionConcursante {
  id             String @id @default(uuid())
  id_concurso    String
  id_concursante String

  puntajes     PuntajesConcursante[]
  concursante  concursante               @relation(fields: [id_concursante], references: [id], onDelete: Cascade, onUpdate: Cascade)
  concurso     Concurso                  @relation(fields: [id_concurso], references: [id], onDelete: Cascade, onUpdate: Cascade)
  penalizacion PenalizacionConcursante[]
}

model PuntajesConcursante {
  id                      String @id @default(uuid())
  puntaje                 Float
  id_participacion        String
  id_criterio_ponderacion String
  id_jurado               String

  jurado              usuario                  @relation(fields: [id_jurado], references: [id], onDelete: Cascade, onUpdate: Cascade)
  criterioPonderacion CriteriosPonderacion     @relation(fields: [id_criterio_ponderacion], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participacion       ParticipacionConcursante @relation(fields: [id_participacion], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PenalizacionConcursante {
  id               String                   @id @default(uuid())
  razon            String
  id_participacion String
  participacion    ParticipacionConcursante @relation(fields: [id_participacion], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
